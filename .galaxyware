



    if not LPH_OBFUSCATED then
        LPH_JIT = function(...) return ... end
        LPH_JIT_MAX = function(...) return ... end
        LPH_JIT_ULTRA = function(...) return ... end
        LPH_NO_VIRTUALIZE = function(...) return ... end
        LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
        LPH_ENCSTR = function(...) return ... end
        LPH_STRENC = function(...) return ... end
        LPH_HOOK_FIX = function(...) return ... end
        LPH_CRASH = function() return print(debug.traceback()) end
    end;

    --// Delta Update Check

    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Molydsxz/uilib/main/Library'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Molydsxz/uilib/main/theme'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Molydsxz/uilib/main/SaveManager'))()
    local skybox_assets = loadstring(game:HttpGet("https://raw.githubusercontent.com/DemoExists/Oblivity-2.0/main/Modules/Skybox_Assets.lua", true))()
    local ESPLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Molydsxz/testesplib/main/.gitignore"))()

    local Window = Library:CreateWindow({
        Title = 'Galaxyware| Beta',
        Center = true, 
        AutoShow = true,
    })

    local Tabs = {
        CombatTab = Window:AddTab('Combat'), 
        VisualsTab = Window:AddTab('Visuals'),
        ViewmodelTab = Window:AddTab('Viewmodel'),
        PlayerTab = Window:AddTab('Player'),  
        BlatantTab = Window:AddTab('Blatant'),  
        UISettings = Window:AddTab('UI Settings'),
    }

    local delta_esp = {
        ["npcs"] = {
            objects = {}
        },
        ["exits"] = {
            objects = {}
        },
        ["corpses"] = {
            objects = {}
        },
        ["vehicles"] = {
            objects = {}
        }
    }

    local headshot_sound = Instance.new("Sound", game.CoreGui)
    headshot_sound.Volume = 10
    local bodyshot_sound = Instance.new("Sound", game.CoreGui)
    bodyshot_sound.Volume = 10

    local hit_sounds = {
        Neverlose = "rbxassetid://8726881116",
        Gamesense = "rbxassetid://4817809188",
        Bell = "rbxassetid://6534947240",
        Rust = "rbxassetid://1255040462",
        Minecraft = "rbxassetid://4018616850",
        Osu = "rbxassetid://7149255551",
        Weeb = "rbxassetid://6442965016",
    }

    local all_hit_sounds = {}
    all_hit_sounds[1] = "None"
    for i, v in pairs(hit_sounds) do
        all_hit_sounds[#all_hit_sounds + 1] = i
    end

    local plrs = game["Players"]
    local ws = game["Workspace"]
    local uis = game["UserInputService"]
    local rs = game["RunService"]
    local hs = game["HttpService"]
    local cgui = game["CoreGui"]
    local lighting = game["Lighting"]
    local GuiService = game["GuiService"]
    local repStorage = game["ReplicatedStorage"]

    local plr = plrs.LocalPlayer
    local mouse = plr:GetMouse()
    local camera = ws.CurrentCamera
    local worldToViewportPoint = camera.worldToViewportPoint

    local Drawingnew = Drawing.new
    local Color3new = Color3.new
    local Color3fromRGB = Color3.fromRGB
    local Vector3new = Vector3.new
    local Vector2new = Vector2.new
    local mathhuge = math.huge
    local mathfloor = math.floor
    local mathceil = math.ceil
    local GetGuiInset = GuiService.GetGuiInset
    local Raynew = Ray.new

    local GunsAmmoTable = {

    }

    --// Visuals, Left Column, Player ESP Section
    --// ESP Main


    local VisualsTabBox = Tabs.VisualsTab:AddLeftTabbox('Player Visuals')
    local PlayerESPTab = VisualsTabBox:AddTab('Player ESP')
    local OtherESPTab = VisualsTabBox:AddTab("Other ESP")

    local ChamsTabBox = Tabs.VisualsTab:AddRightTabbox('Chams')
    local ChamsTab = ChamsTabBox:AddTab('Chams')

    do
        --// Player ESP
        do
            PlayerESPTab:AddToggle('PlayerESP_Toggle', {Text = 'Toggle', Default = false}):OnChanged(function()
                esp.enabled = Toggles.PlayerESP_Toggle.Value
            end)
        
            PlayerESPTab:AddSlider('PlayerESP_MaxDistance', {Text = 'Max Dist', Default = 0, Min = 0, Max = 10000, Rounding = 0, Compact = true, Tooltip = "Set to 0 for No Limit"}):OnChanged(function()
                esp.maxdist = Options.PlayerESP_MaxDistance.Value
            end)

            --//Name ESP
            do
                PlayerESPTab:AddToggle('PlayerESP_NameToggle', {Text = 'Name', Default = false}):AddColorPicker("PlayerESP_NameColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                    esp.settings.name.enabled = Toggles.PlayerESP_NameToggle.Value
                end)
        
                Options.PlayerESP_NameColor:OnChanged(function()
                    esp.settings.name.color = Options.PlayerESP_NameColor.Value
                end)
            end
        
            --//Box ESP
            do
                PlayerESPTab:AddToggle('PlayerESP_BoxToggle', {Text = 'Box', Default = false}):AddColorPicker("PlayerESP_BoxColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                    esp.settings.box.enabled = Toggles.PlayerESP_BoxToggle.Value
                end)
                
                Options.PlayerESP_BoxColor:OnChanged(function()
                    esp.settings.box.color = Options.PlayerESP_BoxColor.Value
                end)
            end
        
            --//Health ESP
            do
                --// Health Bar
        
                PlayerESPTab:AddToggle('PlayerESP_HealthBarToggle', {Text = 'Health Bar', Default = false}):OnChanged(function()
                    esp.settings.healthbar.enabled = Toggles.PlayerESP_HealthBarToggle.Value
                end)
        
                --// Health Text
        
                PlayerESPTab:AddToggle('PlayerESP_HealthTextToggle', {Text = 'Health Text', Default = false}):AddColorPicker("PlayerESP_HealthTextColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                    esp.settings.healthtext.enabled = Toggles.PlayerESP_HealthTextToggle.Value
                end)
                
                Options.PlayerESP_HealthTextColor:OnChanged(function()
                    esp.settings.healthtext.color = Options.PlayerESP_HealthTextColor.Value
                end)
            end
        
            --//Distance ESP
            do
                PlayerESPTab:AddToggle('PlayerESP_DistanceToggle', {Text = 'Distance', Default = false}):AddColorPicker("PlayerESP_DistanceColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                    esp.settings.distance.enabled = Toggles.PlayerESP_DistanceToggle.Value
                end)
                
                Options.PlayerESP_DistanceColor:OnChanged(function()
                    esp.settings.distance.color = Options.PlayerESP_DistanceColor.Value
                end)
            end
        
            --//View Angle ESP
            do
                PlayerESPTab:AddToggle('PlayerESP_ViewAngleToggle', {Text = 'View Angle', Default = false}):AddColorPicker("PlayerESP_ViewAngleColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                    esp.settings.viewangle.enabled = Toggles.PlayerESP_ViewAngleToggle.Value
                end)
                
                Options.PlayerESP_ViewAngleColor:OnChanged(function()
                    esp.settings.viewangle.color = Options.PlayerESP_ViewAngleColor.Value
                end)
            end
        
            PlayerESPTab:AddDivider()
    
            --// Settings
            do
                PlayerESPTab:AddToggle('PlayerESP_DisplayNames', {Text = 'Display Names', Default = false}):OnChanged(function()
                    esp.settings.name.displaynames = Toggles.PlayerESP_DisplayNames.Value
                end)
        
                PlayerESPTab:AddToggle('PlayerESP_Outlines', {Text = 'Outlines', Default = false}):OnChanged(function()
                    for i,v in pairs(esp.settings) do
                        v.outline = Toggles.PlayerESP_Outlines.Value
                    end
                end)
        
                PlayerESPTab:AddToggle('PlayerESP_HideFriendlies', {Text = 'Hide Teammates', Default = false}):OnChanged(function()
                    esp.teamcheck = Toggles.PlayerESP_HideFriendlies.Value
                end)
        
                PlayerESPTab:AddSlider('PlayerESP_FontSize', {Text = 'Font Size', Default = 13, Min = 0, Max = 100, Rounding = 0, Compact = false}):OnChanged(function()
                    esp.fontsize = Options.PlayerESP_FontSize.Value
                end)
        
                PlayerESPTab:AddDropdown('PlayerESP_FontFamily', {Values = { 'UI', 'System', 'Plex', 'Monospace' }, Default = 3, Multi = false, Text = 'Font Family'}):OnChanged(function()
                    if Options.PlayerESP_FontFamily.Value == "UI" then
                        esp.font = 0
                    elseif Options.PlayerESP_FontFamily.Value == "System" then
                        esp.font = 1
                    elseif Options.PlayerESP_FontFamily.Value == "Plex" then
                        esp.font = 2
                    elseif Options.PlayerESP_FontFamily.Value == "Monospace" then
                        esp.font = 3
                    end
                end)
        
                PlayerESPTab:AddSlider('PlayerESP_HealthBarSize', {Text = 'Health Bar Size', Default = 3, Min = 1, Max = 5, Rounding = 0, Compact = false}):OnChanged(function()
                    esp.settings.healthbar.size = Options.PlayerESP_HealthBarSize.Value
                end)
            end
        end

        --// Player Chams
        do
            ChamsTab:AddToggle('Chams_Toggle', {Text = 'Toggle', Default = false}):AddColorPicker("Chams_FillColor", {Default = Color3.fromRGB(255, 255, 255), Tooltip = "Fill"}):AddColorPicker("Chams_OutlineColor", {Default = Color3.fromRGB(0, 0, 0), Tooltip = "Outline"}):OnChanged(function()
                esp.settings_chams.enabled = Toggles.Chams_Toggle.Value
            end)

            Options.Chams_FillColor:OnChanged(function()
                esp.settings_chams.fill_color = Options.Chams_FillColor.Value
            end)
            Options.Chams_OutlineColor:OnChanged(function()
                esp.settings_chams.outline_color = Options.Chams_OutlineColor.Value
            end)

            ChamsTab:AddToggle('Chams_AutoColorToggle', {Text = 'Auto Color', Default = false}):AddColorPicker("Chams_VisibleColor", {Default = Color3.fromRGB(0, 255, 0), Tooltip = "Visible"}):AddColorPicker("Chams_InvisibleColor", {Default = Color3.fromRGB(255, 0, 0), Tooltip = "Invisible"}):OnChanged(function()
                esp.settings_chams.autocolor = Toggles.Chams_AutoColorToggle.Value
            end)

            Options.Chams_VisibleColor:OnChanged(function()
                esp.settings_chams.visible_Color = Options.Chams_VisibleColor.Value
            end)
            Options.Chams_InvisibleColor:OnChanged(function()
                esp.settings_chams.invisible_Color = Options.Chams_InvisibleColor.Value
            end)

            ChamsTab:AddDivider()

            ChamsTab:AddToggle('Chams_Outline', {Text = 'Outline', Default = false}):OnChanged(function()
                esp.settings_chams.outline = Toggles.Chams_Outline.Value
            end)
            ChamsTab:AddToggle('Chams_HideFriendlies', {Text = 'Hide Teammates', Default = false}):OnChanged(function()
                esp.settings_chams.teamcheck = Toggles.Chams_HideFriendlies.Value
            end)

            ChamsTab:AddSlider('Chams_FillTransparency', {Text = 'Fill Transparency', Default = esp.settings_chams.fill_transparency, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                esp.settings_chams.fill_transparency = Options.Chams_FillTransparency.Value
            end)

            ChamsTab:AddSlider('Chams_OutlineTransparency', {Text = 'Outline Transparency', Default = esp.settings_chams.fill_transparency, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                esp.settings_chams.outline_transparency = Options.Chams_OutlineTransparency.Value
            end)
        end

        --// Other ESP
        do
            OtherESPTab:AddToggle('OtherESP_NPC_Toggle', {Text = 'AI', Default = false}):AddColorPicker("OtherESP_NPC_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                delta_esp["npcs"].enabled = Toggles.OtherESP_NPC_Toggle.Value
            end)
            OtherESPTab:AddSlider('OtherESP_NPC_MaxDist', {Text = 'Max Dist', Default = 0, Min = 0, Max = 5000, Rounding = 0, Compact = true, Tooltip = "Set to 0 for No Limit"})

            Options.OtherESP_NPC_Color:OnChanged(function()
                delta_esp["npcs"].enabled = Options.OtherESP_NPC_Color.Value
            end)

            OtherESPTab:AddToggle('OtherESP_Exits_Toggle', {Text = 'Exits', Default = false}):AddColorPicker("OtherESP_Exits_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                delta_esp["exits"].enabled = Toggles.OtherESP_Exits_Toggle.Value
            end)
            OtherESPTab:AddSlider('OtherESP_Exits_MaxDist', {Text = 'Max Dist', Default = 0, Min = 0, Max = 5000, Rounding = 0, Compact = true, Tooltip = "Set to 0 for No Limit"})

            Options.OtherESP_Exits_Color:OnChanged(function()
                delta_esp["exits"].enabled = Options.OtherESP_Exits_Color.Value
            end)

            OtherESPTab:AddToggle('OtherESP_Corpses_Toggle', {Text = 'Corpses', Default = false}):AddColorPicker("OtherESP_Corpses_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                delta_esp["corpses"].enabled = Toggles.OtherESP_Corpses_Toggle.Value
            end)
            OtherESPTab:AddSlider('OtherESP_Corpses_MaxDist', {Text = 'Max Dist', Default = 0, Min = 0, Max = 5000, Rounding = 0, Compact = true, Tooltip = "Set to 0 for No Limit"})

            Options.OtherESP_Corpses_Color:OnChanged(function()
                delta_esp["corpses"].enabled = Options.OtherESP_Corpses_Color.Value
            end)

            OtherESPTab:AddToggle('OtherESP_Vehicles_Toggle', {Text = 'Vehicles', Default = false}):AddColorPicker("OtherESP_Vehicles_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                delta_esp["vehicles"].enabled = Toggles.OtherESP_Vehicles_Toggle.Value
            end)
            OtherESPTab:AddSlider('OtherESP_Vehicles_MaxDist', {Text = 'Max Dist', Default = 0, Min = 0, Max = 5000, Rounding = 0, Compact = true, Tooltip = "Set to 0 for No Limit"})

            Options.OtherESP_Vehicles_Color:OnChanged(function()
                delta_esp["vehicles"].enabled = Options.OtherESP_Vehicles_Color.Value
            end)
        end
    end



    --// Other Visuals, Right Column, Other Visuals Section
    --// Other Visuals Main

    local OtherDrawingObjectsTabBox = Tabs.VisualsTab:AddRightTabbox('Other Drawing Objects')
    local SnaplineTab = OtherDrawingObjectsTabBox:AddTab('Snapline')
    local CrosshairTab = OtherDrawingObjectsTabBox:AddTab('Crosshair')
    local FOVCircleTab = OtherDrawingObjectsTabBox:AddTab('FOV Circle')

    --// Snapline
    local Snapline_Object = Drawingnew("Line")
    Snapline_Object.Visible = false
    Snapline_Object.Thickness = 1
    Snapline_Object.Transparency = 1
    Snapline_Object.From = Vector2new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    Snapline_Object.To = Vector2new(camera.ViewportSize.X /  2, camera.ViewportSize.Y / 2)
    Snapline_Object.Color = Color3fromRGB(255, 255, 255)

    do
        do
            SnaplineTab:AddToggle('Snapline_Toggle', {Text = 'Toggle', Default = false}):AddColorPicker("Snapline_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                Snapline_Object.Visible = Toggles.Snapline_Toggle.Value
            end)
        
            Options.Snapline_Color:OnChanged(function()
                Snapline_Object.Color = Options.Snapline_Color.Value
            end)
        
            SnaplineTab:AddSlider('Snapline_Thickness', {Text = 'Thickness', Default = 1, Min = 0.5, Max = 5, Rounding = 1, Compact = false}):OnChanged(function()
                Snapline_Object.Thickness = Options.Snapline_Thickness.Value
            end)
        
            SnaplineTab:AddSlider('Snapline_Transparency', {Text = 'Transparency', Default = 1, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                Snapline_Object.Transparency = Options.Snapline_Transparency.Value
            end)
        
            SnaplineTab:AddDropdown('Snapline_TargetPart', {Values = { 'Head', 'HumanoidRootPart' }, Default = 1, Multi = false, Text = 'Snap To'})
        end

        --// Crosshair
        local Crosshair_Horizontal = Drawingnew("Line")
        Crosshair_Horizontal.Visible = false
        Crosshair_Horizontal.Thickness = 1
        Crosshair_Horizontal.Transparency = 1
        Crosshair_Horizontal.From = Vector2new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        Crosshair_Horizontal.To = Vector2new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        Crosshair_Horizontal.Color = Color3fromRGB(255, 255, 255)
        
        local Crosshair_Vertical = Drawingnew("Line")
        Crosshair_Vertical.Visible = false
        Crosshair_Vertical.Thickness = 1
        Crosshair_Vertical.Transparency = 1
        Crosshair_Vertical.From = Vector2new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        Crosshair_Vertical.To = Vector2new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        Crosshair_Vertical.Color = Color3fromRGB(255, 255, 255)
        do
            CrosshairTab:AddToggle('Crosshair_Toggle', {Text = 'Toggle', Default = false}):AddColorPicker("Crosshair_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                Crosshair_Horizontal.Visible = Toggles.Crosshair_Toggle.Value
                Crosshair_Vertical.Visible = Toggles.Crosshair_Toggle.Value
            end)
        
            Options.Crosshair_Color:OnChanged(function()
                Crosshair_Horizontal.Color = Options.Crosshair_Color.Value
                Crosshair_Vertical.Color = Options.Crosshair_Color.Value
            end)
        
            CrosshairTab:AddSlider('Crosshair_Size', {Text = 'Size', Default = 10, Min = 0, Max = 100, Rounding = 1, Compact = false}):OnChanged(function()
                Crosshair_Horizontal.From = Vector2new(camera.ViewportSize.X / 2 - Options.Crosshair_Size.Value, camera.ViewportSize.Y / 2)
                Crosshair_Horizontal.To = Vector2new(camera.ViewportSize.X / 2 + Options.Crosshair_Size.Value, camera.ViewportSize.Y / 2)
                Crosshair_Vertical.From = Vector2new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2 - Options.Crosshair_Size.Value)
                Crosshair_Vertical.To = Vector2new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2 + Options.Crosshair_Size.Value)
            end)

            CrosshairTab:AddSlider('Crosshair_Thickness', {Text = 'Thickness', Default = 1, Min = 0.5, Max = 5, Rounding = 1, Compact = false}):OnChanged(function()
                Crosshair_Horizontal.Thickness = Options.Crosshair_Thickness.Value
                Crosshair_Vertical.Thickness = Options.Crosshair_Thickness.Value  
            end)
        
            CrosshairTab:AddSlider('Crosshair_Transparency', {Text = 'Transparency', Default = 1, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                Crosshair_Horizontal.Transparency = Options.Crosshair_Transparency.Value
                Crosshair_Vertical.Transparency = Options.Crosshair_Transparency.Value
            end)
        end

        --// FOV Circle
        local FOVCircle_Object = Drawingnew("Circle")
        FOVCircle_Object.Visible = false
        FOVCircle_Object.Color = Color3fromRGB(255, 255, 255)
        FOVCircle_Object.Radius = 100
        FOVCircle_Object.Thickness = 1
        FOVCircle_Object.Filled = false
        FOVCircle_Object.Transparency = 1
        FOVCircle_Object.Position = Vector2new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        do
            FOVCircleTab:AddToggle('FOVCircle_Toggle', {Text = 'Toggle', Default = false}):AddColorPicker("FOVCircle_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                FOVCircle_Object.Visible = Toggles.FOVCircle_Toggle.Value
            end)
        
            Options.FOVCircle_Color:OnChanged(function()
                FOVCircle_Object.Color = Options.FOVCircle_Color.Value
            end)

            FOVCircleTab:AddToggle('FOVCircle_Filled', {Text = 'Filled', Default = false}):OnChanged(function()
                FOVCircle_Object.Filled = Toggles.FOVCircle_Filled.Value
            end)
        
            FOVCircleTab:AddSlider('FOVCircle_Radius', {Text = 'Radius', Default = 100, Min = 0, Max = 750, Rounding = 0, Compact = false}):OnChanged(function()
                FOVCircle_Object.Radius = Options.FOVCircle_Radius.Value
            end)

            FOVCircleTab:AddSlider('FOVCircle_Thickness', {Text = 'Thickness', Default = 1, Min = 0.5, Max = 5, Rounding = 1, Compact = false}):OnChanged(function()
                FOVCircle_Object.Thickness = Options.FOVCircle_Thickness.Value
            end)
        
            FOVCircleTab:AddSlider('FOVCircle_Transparency', {Text = 'Transparency', Default = 1, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                FOVCircle_Object.Transparency = Options.FOVCircle_Transparency.Value
            end)

            FOVCircleTab:AddSlider('FOVCircle_NumSides', {Text = 'Num Sides', Default = 0, Min = 0, Max = 50, Rounding = 0, Compact = false}):OnChanged(function()
                FOVCircle_Object.NumSides = Options.FOVCircle_NumSides.Value
            end)
        end
    end

    local InvViewerTabBox = Tabs.VisualsTab:AddRightTabbox('Inventory Viewer')
    local InvViewerTab = InvViewerTabBox:AddTab('Inventory Viewer')

    local inventory_viewer_title_text = Drawingnew("Text")
    inventory_viewer_title_text.Visible = true
    inventory_viewer_title_text.Transparency = 1
    inventory_viewer_title_text.Font = 2
    inventory_viewer_title_text.Size = 13
    inventory_viewer_title_text.Color = Color3fromRGB(255, 255, 255)
    inventory_viewer_title_text.Outline = true
    inventory_viewer_title_text.Center = false
    inventory_viewer_title_text.Position = Vector2new(10, camera.ViewportSize.Y / 2)

    local inventory_viewer_inv_text = Drawingnew("Text")
    inventory_viewer_inv_text.Visible = true
    inventory_viewer_inv_text.Transparency = 1
    inventory_viewer_inv_text.Font = 2
    inventory_viewer_inv_text.Size = 13 
    inventory_viewer_inv_text.Color = Color3fromRGB(200, 200, 200)
    inventory_viewer_inv_text.Outline = true
    inventory_viewer_inv_text.Center = false
    inventory_viewer_inv_text.Position = Vector2new(10, camera.ViewportSize.Y / 2 + 15)

    do
        --// Inv Viewer
        do
            InvViewerTab:AddToggle('InvViewer_Toggle', {Text = 'Enabled', Default = false}):AddColorPicker("InvViewer_ColorTitle", {Default = Color3.fromRGB(255, 255, 255), Tooltip = "Title Text Color"}):AddColorPicker("InvViewer_ColorInventory", {Default = Color3.fromRGB(200, 200, 200), Tooltip = "Inventory Text Color"})
            InvViewerTab:AddSlider('InvViewer_XOffset', {Text = 'X Offset', Default = 0, Min = 0, Max = 2000, Rounding = 0, Compact = true})
            InvViewerTab:AddSlider('InvViewer_YOffset', {Text = 'Y Offset', Default = 0, Min = -500, Max = 500, Rounding = 0, Compact = true})

            Options.InvViewer_XOffset:OnChanged(function()
                inventory_viewer_title_text.Position = Vector2new(10 + Options.InvViewer_XOffset.Value, camera.ViewportSize.Y / 2 + Options.InvViewer_YOffset.Value)
                inventory_viewer_inv_text.Position = Vector2new(10 + Options.InvViewer_XOffset.Value, camera.ViewportSize.Y / 2 + Options.InvViewer_YOffset.Value + 15)
            end)

            Options.InvViewer_YOffset:OnChanged(function()
                inventory_viewer_title_text.Position = Vector2new(10 + Options.InvViewer_XOffset.Value, camera.ViewportSize.Y / 2 + -Options.InvViewer_YOffset.Value)
                inventory_viewer_inv_text.Position = Vector2new(10 + Options.InvViewer_XOffset.Value, camera.ViewportSize.Y / 2 + 15 + -Options.InvViewer_YOffset.Value)
            end)

            Options.InvViewer_ColorTitle:OnChanged(function()
                inventory_viewer_title_text.Color = Options.InvViewer_ColorTitle.Value
            end)

            Options.InvViewer_ColorInventory:OnChanged(function()
                inventory_viewer_inv_text.Color = Options.InvViewer_ColorInventory.Value
            end)
        end
    end


    --// World Lighting, Right Column
    --// World Lighting Main

    local WorldLightingTabBox = Tabs.VisualsTab:AddLeftTabbox('World & Lighting')
    local WorldTab = WorldLightingTabBox:AddTab('World')
    local LightingTab = WorldLightingTabBox:AddTab('Lighting')

    do
        --// Lighting
        do
            LightingTab:AddToggle('Lighting_CustomTimeToggle', {Text = 'Custom Time', Default = false})
            LightingTab:AddSlider('Lighting_CustomTimeValue', {Text = 'Custom Time', Default = 8, Min = 0, Max = 24, Rounding = 3, Compact = true})
            LightingTab:AddToggle('Lighting_CustomAmbient', {Text = 'Custom Ambient', Default = false}):AddColorPicker("Lighting_CustomAmbientColor", {Default = Color3.fromRGB(0, 0, 0)}):OnChanged(function()
                if not Toggles.Lighting_CustomAmbient.Value then
                    lighting.Ambient = Color3fromRGB(0, 0, 0)
                end
            end)
        end

        --// World
        do 
            WorldTab:AddToggle('World_Shadows', {Text = 'Global Shadows', Default = lighting.GlobalShadows}):OnChanged(function()
                lighting.GlobalShadows = Toggles.World_Shadows.Value
            end)

            WorldTab:AddToggle('World_Grass', {Text = 'Show Grass', Default = lighting.GlobalShadows}):OnChanged(function()
                sethiddenproperty(ws.Terrain, "Decoration", Toggles.World_Grass.Value)
            end)

            if ws.Terrain:FindFirstChild("Clouds") then
                WorldTab:AddToggle('World_Clouds', {Text = 'Show Clouds', Default = ws.Terrain.Clouds.Enabled}):OnChanged(function()
                    ws.Terrain.Clouds.Enabled = Toggles.World_Clouds.Value
                end)
            end

            WorldTab:AddDivider()

            --{"Normal", "Among Us", "Nebula", "Vaporwave", "Clouds", "Twilight", "DaBaby", "Minecraft", "Chill"}

            WorldTab:AddDropdown('World_Skybox', {Values = {"Normal", "Among Us", "Nebula", "Vaporwave", "Clouds", "Twilight", "DaBaby", "Minecraft", "Chill"}, Default = "Normal", Multi = false, Text = 'Custom Skybox'}):OnChanged(function()
                if lighting:FindFirstChild("Sky") then
                    lighting.Sky["SkyboxBk"] =  skybox_assets[Options.World_Skybox.Value].SkyboxBk
                    lighting.Sky["SkyboxDn"] =  skybox_assets[Options.World_Skybox.Value].SkyboxDn
                    lighting.Sky["SkyboxFt"] =  skybox_assets[Options.World_Skybox.Value].SkyboxFt
                    lighting.Sky["SkyboxLf"] =  skybox_assets[Options.World_Skybox.Value].SkyboxLf
                    lighting.Sky["SkyboxRt"] =  skybox_assets[Options.World_Skybox.Value].SkyboxRt
                    lighting.Sky["SkyboxUp"] =  skybox_assets[Options.World_Skybox.Value].SkyboxUp
                end
            end)
        end
    end



    --// Viewmodel Tab

    local ViewmodelVisualsTabBox = Tabs.ViewmodelTab:AddLeftTabbox('Arm Visuals')
    local ViewmodelVisualsTab = ViewmodelVisualsTabBox:AddTab('Arm Visuals')

    local WeaponViewmodelVisualsTabBox = Tabs.ViewmodelTab:AddRightTabbox('Weapon Visuals')
    local WeaponViewmodelVisualsTab = WeaponViewmodelVisualsTabBox:AddTab('Weapon Visuals')

    local ViewmodelOffsetTabBox = Tabs.ViewmodelTab:AddRightTabbox('Viewmodel Offset')
    local ViewmodelOffsetTab = ViewmodelOffsetTabBox:AddTab('Viewmodel Offset')



    do
        local EnumMaterials = {"Plastic","SmoothPlastic","Neon","Wood","WoodPlanks","Marble","Slate","Concrete","Granite","Brick","Pebble","Cobblestone","CorrodedMetal","DiamondPlate","Foil","Metal","Grass","Sand","Fabric","Ice","ForceField"}

        ViewmodelVisualsTab:AddToggle('Viewmodel_Visuals_Toggle', {Text = 'Toggle', Default = false, Tooltip = "Applies after re-equip"})
        ViewmodelVisualsTab:AddDivider()
        ViewmodelVisualsTab:AddLabel("Left Arm Color"):AddColorPicker("Viewmodel_Visuals_LeftArmColor", {Default = Color3.fromRGB(255, 255, 255)})
        ViewmodelVisualsTab:AddLabel("Right Arm Color"):AddColorPicker("Viewmodel_Visuals_RightArmColor", {Default = Color3.fromRGB(255, 255, 255)})
        ViewmodelVisualsTab:AddDivider()
        ViewmodelVisualsTab:AddSlider('Viewmodel_Visuals_LeftArmTransparency', {Text = 'Left Arm Transparency', Default = 0.5, Min = 0, Max = 1, Rounding = 2, Compact = false})
        ViewmodelVisualsTab:AddSlider('Viewmodel_Visuals_RightArmTransparency', {Text = 'Right Arm Transparency', Default = 0.5, Min = 0, Max = 1, Rounding = 2, Compact = false})
        ViewmodelVisualsTab:AddDivider()
        ViewmodelVisualsTab:AddDropdown('Viewmodel_Visuals_LeftArmMaterial', {Values = EnumMaterials, Default = "ForceField", Multi = false, Text = 'Left Arm Material'})
        ViewmodelVisualsTab:AddDropdown('Viewmodel_Visuals_RightArmMaterial', {Values = EnumMaterials, Default = "ForceField", Multi = false, Text = 'Right Arm Material'})

        WeaponViewmodelVisualsTab:AddToggle('Weapon_Viewmodel_Visuals_Toggle', {Text = 'Toggle', Default = false, Tooltip = "Applies after re-equip"})
        WeaponViewmodelVisualsTab:AddDivider()
        WeaponViewmodelVisualsTab:AddLabel("Item Color"):AddColorPicker("Weapon_Viewmodel_Visuals_ItemColor", {Default = Color3.fromRGB(255, 255, 255)})
        WeaponViewmodelVisualsTab:AddDivider()
        WeaponViewmodelVisualsTab:AddDropdown('Weapon_Viewmodel_Visuals_ItemMaterial', {Values = EnumMaterials, Default = "ForceField", Multi = false, Text = 'Item Material'})

        ViewmodelOffsetTab:AddToggle('Viewmodel_Offset_Toggle', {Text = 'Toggle', Default = false})
        ViewmodelOffsetTab:AddSlider('Viewmodel_Offset_X', {Text = 'X', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = true})
        ViewmodelOffsetTab:AddSlider('Viewmodel_Offset_Y', {Text = 'Y', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = true})
        ViewmodelOffsetTab:AddSlider('Viewmodel_Offset_Z', {Text = 'Z', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = true})

        LPH_JIT_ULTRA(function() 
            game.Workspace.Camera.ChildAdded:Connect(function(child)
                wait()
                if Toggles.Viewmodel_Visuals_Toggle.Value or Toggles.Weapon_Viewmodel_Visuals_Toggle.Value then
                    for i,v in pairs(child:GetChildren()) do
                        if v:IsA("BodyColors") and Toggles.Viewmodel_Visuals_Toggle.Value then
                            v.LeftArmColor3 = Options.Viewmodel_Visuals_LeftArmColor.Value
                            v.RightArmColor3 = Options.Viewmodel_Visuals_RightArmColor.Value 
                        end
        
                        if v:IsA("MeshPart") and v.Name:find("Left") and Toggles.Viewmodel_Visuals_Toggle.Value then
                            v.Transparency = Options.Viewmodel_Visuals_LeftArmTransparency.Value
                            v.Material = Options.Viewmodel_Visuals_LeftArmMaterial.Value
                        end
        
                        if v:IsA("MeshPart") and v.Name:find("Right") and Toggles.Viewmodel_Visuals_Toggle.Value then
                            v.Transparency = Options.Viewmodel_Visuals_RightArmTransparency.Value
                            v.Material = Options.Viewmodel_Visuals_RightArmMaterial.Value
                        end
                        
                        if v:IsA("Model") and v.Name ~= "Item" and Toggles.Viewmodel_Visuals_Toggle.Value then
                            v:Destroy()    
                        end

                        if v:IsA("Shirt") and Toggles.Viewmodel_Visuals_Toggle.Value then
                            v.ShirtTemplate = ""    
                        end
                        
                        if v.Name == "Item" and Toggles.Weapon_Viewmodel_Visuals_Toggle.Value then
                            for i2, v2 in pairs(v:GetDescendants()) do
                                if v2.ClassName == "SurfaceAppearance" then
                                    v2:Destroy()
                                end
                                
                                if v2:IsA("MeshPart") or v2:IsA("Part") then
                                    v2.Color = Options.Weapon_Viewmodel_Visuals_ItemColor.Value
                                    v2.Material = Options.Weapon_Viewmodel_Visuals_ItemMaterial.Value
                                end
                            end
                        end    
                    end
                end
            end)
        end)()
    end

    --// Combat Tab

    local SilentAimTabBox = Tabs.CombatTab:AddLeftTabbox('Silent Aim')
    local SilentAimTab = SilentAimTabBox:AddTab('Silent Aim')

    local NPCAimTabBox = Tabs.CombatTab:AddLeftTabbox('NPC Aimlock')
    local NPCAimTab = NPCAimTabBox:AddTab('NPC Aimlock')

    local AimlockTabBox = Tabs.CombatTab:AddLeftTabbox('Aimlock')
    local AimlockTab = AimlockTabBox:AddTab('Aimlock')

    local HitboxTabBox = Tabs.CombatTab:AddLeftTabbox('Hitbox')
    local HitboxTab = HitboxTabBox:AddTab('Hitbox')



    local HitsoundTabBox = Tabs.CombatTab:AddRightTabbox('Hitsounds')
    local HitsoundTab = HitsoundTabBox:AddTab('Hitsounds')

    do
        --// Aimlock
        do
            AimlockTab:AddToggle('Aimlock_Toggle', {Text = 'Toggle', Default = false}):AddKeyPicker('Aimlock_Holding', {Default = 'E', SyncToggleState = false, Mode = 'Hold', Text = 'Aimlock', NoUI = false,})
            AimlockTab:AddDivider()
            AimlockTab:AddToggle('Aimlock_IgnoreTeammates', {Text = 'Team Check', Default = false})
            AimlockTab:AddToggle('Aimlock_Resolver', {Text = 'Resolver', Default = false})
            AimlockTab:AddDropdown('Aimlock_TargetPart', {Values = { 'Head', 'HumanoidRootPart' }, Default = 1, Multi = false, Text = 'Target Part'})
        end

        --// Silent Aimlock

        do
            SilentAimTab:AddToggle('Silent_Toggle', {Text = 'Toggle ', Default = false, Tooltip = "Ignores Aimlock"})
            SilentAimTab:AddSlider('Silent_Hitchance', {Text = 'Hitchance', Default = 100, Min = 0, Max = 100, Rounding = 0, Compact = true, Tooltip = "Set to 100 for always hit"})
            SilentAimTab:AddDivider()
            SilentAimTab:AddToggle('Silent_IgnoreTeammates', {Text = 'Team Check', Default = false})
            SilentAimTab:AddDropdown('Silent_TargetPart', {Values = { 'Head', 'HumanoidRootPart' }, Default = 1, Multi = false, Text = 'Target Part'})
        end
        --// NPC Aimlock
        do
            NPCAimTab:AddToggle('NPCAimlock_Toggle', {Text = 'Toggle', Default = false}):AddKeyPicker('Aimlock_Holding', {Default = 'E', SyncToggleState = false, Mode = 'Hold', Text = 'NPC Aimlock', NoUI = false, Tooltip = "Use Different Key than Normal Aimlock"})
            NPCAimTab:AddDivider()
            NPCAimTab:AddDropdown('NPCAimlock_TargetPart', {Values = { 'Head', 'HumanoidRootPart' }, Default = 1, Multi = false, Text = 'Target Part'})
        end


        --// Hitbox
        do
            HitboxTab:AddToggle('Hitbox_OverrideToggle', {Text = 'Override Hitboxes', Default = false})     
            HitboxTab:AddDropdown('Hitbox_OverridePart', {Values = { 'Head', 'Face', 'HeadTopHitBox', 'HumanoidRootPart', 'UpperTorso', 'LowerTorso'}, Default = 1, Multi = false, Text = 'Override Part'})
        end

        do
            HitsoundTab:AddDropdown('Hitsound_HeadSound', {Values = all_hit_sounds, Default = 1, Multi = false, Text = 'Headshot Sound'}):OnChanged(function()
                if Options.Hitsound_HeadSound.Value == "None" then
                    return
                end
                headshot_sound.SoundId = hit_sounds[Options.Hitsound_HeadSound.Value]
            end)

            HitsoundTab:AddSlider('Hitsound_HeadVolume', {Text = 'Volume', Default = 1, Min = 0, Max = 10, Rounding = 2, Compact = true}):OnChanged(function()
                headshot_sound.Volume = Options.Hitsound_HeadVolume.Value
            end)

            HitsoundTab:AddDropdown('Hitsound_BodySound', {Values = all_hit_sounds, Default = 1, Multi = false, Text = 'Bodyshot Sound'}):OnChanged(function()
                if Options.Hitsound_BodySound.Value == "None" then 
                    return
                end
                bodyshot_sound.SoundId =  hit_sounds[Options.Hitsound_BodySound.Value]
            end)

            HitsoundTab:AddSlider('Hitsound_BodyVolume', {Text = 'Volume', Default = 1, Min = 0, Max = 10, Rounding = 2, Compact = true}):OnChanged(function()
                bodyshot_sound.Volume = Options.Hitsound_BodyVolume.Value
            end)

            HitsoundTab:AddDivider()
            HitsoundTab:AddLabel("Custom Hitsounds")

            HitsoundTab:AddInput('Hitsound_CustomHitsoundHead', {Default = "", Numeric = true, Finished = true, Text = 'Custom Head Hitsound' ,Placeholder = 'Enter Roblox Sound ID', Tooltip = "Not Tested"}):OnChanged(function()
                headshot_sound.SoundId = Options.Hitsound_CustomHitsoundHead.Value
            end)

            HitsoundTab:AddInput('Hitsound_CustomHitsoundBody', {Default = "", Numeric = true, Finished = true, Text = 'Custom Body Hitsound' ,Placeholder = 'Enter Roblox Sound ID', Tooltip = "Not Tested"}):OnChanged(function()
                bodyshot_sound.SoundId = Options.Hitsound_CustomHitsoundBody.Value
            end)
        end
    end

    --// Player Tab

    local PlayerTabBox = Tabs.PlayerTab:AddLeftTabbox('Player')
    local PlayerModsTab = PlayerTabBox:AddTab('Player')

    local CameraTabBox = Tabs.PlayerTab:AddRightTabbox('Camera')
    local CameraModsTab = CameraTabBox:AddTab('Camera')

    local DisablesTabBox = Tabs.PlayerTab:AddLeftTabbox('Disables')
    local DisablesTab = DisablesTabBox:AddTab('Disables')

    local OtherTabBox = Tabs.PlayerTab:AddRightTabbox('Other')
    local OtherTab = OtherTabBox:AddTab('Other')

    do
        --// Player Tab
        do
            PlayerModsTab:AddToggle('Player_WalkSpeedToggle', {Text = 'Enable WalkSpeed', Default = false})
            PlayerModsTab:AddSlider('Player_WalkSpeedValue', {Text = 'Speed: ', Default = 21, Min = 0, Max = 21, Rounding = 1, Compact = true})
            PlayerModsTab:AddToggle('Player_JumpPowerToggle', {Text = 'Enable JumpHeight', Default = false})
            PlayerModsTab:AddSlider('Player_JumpPowerValue', {Text = 'Jump Height: ', Default = 3.3, Min = 0, Max = 10, Rounding = 1, Compact = true})
            PlayerModsTab:AddDivider()
            PlayerModsTab:AddToggle('Player_ChatSpam', {Text = 'Chat Spam', Default = false})
            PlayerModsTab:AddInput('Player_ChatSpamMessage', {Default = 'test', Numeric = false, Finished = true, Text = 'Chat Spam Message', Placeholder = 'Text to Spam'})

            LPH_JIT_ULTRA(function()
                task.spawn(function()
                    while true do
                        wait(1)
                        if Toggles.Player_ChatSpam.Value then
                            repStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Options.Player_ChatSpamMessage.Value, "Global")
                        end
                    end
                end)
            end)()
        end

        --Camera Tab
        do
            CameraModsTab:AddToggle('Camera_FOVToggle', {Text = 'Enable Field of View', Default = false})
            CameraModsTab:AddSlider('Camera_FOVValue', {Text = 'FOV: ', Default = 70, Min = 0, Max = 120, Rounding = 0, Compact = true})

            Toggles.Camera_FOVToggle:OnChanged(function()
                if Toggles.Camera_FOVToggle.Value then
                    camera.FieldOfView = Options.Camera_FOVValue.Value
                else
                    camera.FieldOfView = 70
                end
            end)

            Options.Camera_FOVValue:OnChanged(function()
                if Toggles.Camera_FOVToggle.Value then
                    camera.FieldOfView = Options.Camera_FOVValue.Value
                end
            end)

            CameraModsTab:AddToggle('Camera_ZoomToggle', {Text = 'Enable Zoom', Default = false}):AddKeyPicker('Camera_ZoomHolding', {Default = 'MB2', SyncToggleState = false, Mode = 'Hold', Text = 'Zoom Keybind', NoUI = false,})
            CameraModsTab:AddSlider('Camera_ZoomValue', {Text = 'Zoom FOV: ', Default = 30, Min = 0, Max = 120, Rounding = 0, Compact = true})

            LPH_JIT_ULTRA(function()
                camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()
                    if Toggles.Camera_FOVToggle.Value then
                        camera.FieldOfView = Options.Camera_FOVValue.Value
                    end
        
                    if Toggles.Camera_ZoomToggle.Value and Options.Camera_ZoomHolding:GetState() then
                        camera.FieldOfView = Options.Camera_ZoomValue.Value
                    end
                end)
            end)()

            CameraModsTab:AddDivider()

            CameraModsTab:AddToggle('Camera_ThirdPerson', {Text = 'Third Person', Default = false})
            CameraModsTab:AddSlider('Camera_ThirdPersonMaxZoom', {Text = 'Max Dist: ', Default = 0.5, Min = 0.5, Max = 100, Rounding = 1, Compact = true})

            Toggles.Camera_ThirdPerson:OnChanged(function()
                if Toggles.Camera_ThirdPerson.Value then
                    plr.CameraMode = Enum.CameraMode.Classic
                    plr.CameraMaxZoomDistance = Options.Camera_ThirdPersonMaxZoom.Value
                else
                    plr.CameraMode = Enum.CameraMode.LockFirstPerson
                    plr.CameraMaxZoomDistance = 0.5
                end
            end)

            Options.Camera_ThirdPersonMaxZoom:OnChanged(function()
                if Toggles.Camera_ThirdPerson.Value then
                    plr.CameraMaxZoomDistance = Options.Camera_ThirdPersonMaxZoom.Value
                end
            end)

            CameraModsTab:AddDivider()
            CameraModsTab:AddToggle('Camera_NoCameraBob', {Text = 'No Camera Bob', Default = false})


        


        --// Other Tab
        do
            OtherTab:AddButton('Whiteout Avatar', function()
                for i,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if v.Name == "SurfaceAppearance" then
                        v:Destroy()    
                    end
                end
            end)

            OtherTab:AddButton('Remove Clothes', function()
                for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                    if v.ClassName == "Model" then
                        v:Destroy()    
                    end
                end
            end)
        end
    end

    --// Functionality, Main Loop, Functions
    LPH_JIT_ULTRA(function()
        function closest_to_mouse(type)
            local target = nil
            local maxDist = mathhuge

            if type == "ai" then
                for i,v in pairs(ws.AiZones:GetChildren()) do
                    for i2, v2 in pairs(v:GetChildren()) do
                        if v2:FindFirstChild("HumanoidRootPart") and v2:FindFirstChild("Head") and v2:FindFirstChild("Humanoid") and v2.Humanoid.Health ~= 0 then
                            local pos, onScreen = camera:WorldToViewportPoint(v2[Options.NPCAimlock_TargetPart.Value].Position)
                            if onScreen then
                                local dist = (Vector2new(pos.X, pos.Y - GetGuiInset(GuiService).Y) - Vector2new(mouse.X, mouse.Y)).Magnitude
                                if dist <= maxDist then
                                    if Toggles.FOVCircle_Toggle.Value then
                                        if dist < Options.FOVCircle_Radius.Value then
                                            maxDist = dist
                                            target = v2
                                        end
                                    else
                                        maxDist = dist
                                        target = v2
                                    end
                                end
                            end
                        end
                    end
                end
            end

            for _,v in ipairs(plrs:GetPlayers()) do
                if v ~= plr and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Head") then
                    local pos, onScreen
                    if type == "aimbot" then
                        if Toggles.Silent_Toggle.Value then
                            pos, onScreen = camera:WorldToViewportPoint(v.Character[Options.Silent_TargetPart.Value].Position)
                        else
                            pos, onScreen = camera:WorldToViewportPoint(v.Character[Options.Aimlock_TargetPart.Value].Position)
                        end

                        if onScreen then
                            local dist = (Vector2new(pos.X, pos.Y - GetGuiInset(GuiService).Y) - Vector2new(mouse.X, mouse.Y)).Magnitude
                            if dist <= maxDist then
                                if Toggles.FOVCircle_Toggle.Value then
                                    if (Toggles.Aimlock_Toggle.Value and Toggles.Aimlock_IgnoreTeammates.Value) or (Toggles.Silent_Toggle.Value and Toggles.Silent_IgnoreTeammates.Value) then
                                        if dist < Options.FOVCircle_Radius.Value and plr.TeamColor ~= v.TeamColor then
                                            maxDist = dist
                                            target = v
                                        end
                                    else
                                        if dist < Options.FOVCircle_Radius.Value then
                                            maxDist = dist
                                            target = v
                                        end
                                    end
                                else
                                    if (Toggles.Aimlock_Toggle.Value and Toggles.Aimlock_IgnoreTeammates.Value) or (Toggles.Silent_Toggle.Value and Toggles.Silent_IgnoreTeammates.Value) then
                                        if dist <= maxDist and plr.TeamColor ~= v.TeamColor then
                                            maxDist = dist
                                            target = v
                                        end
                                    else
                                        if dist <= maxDist then
                                            maxDist = dist 
                                            target = v 
                                        end
                                    end
                                end
                            end
                        end     
                    elseif type == "snapline" then
                        pos, onScreen = camera:WorldToViewportPoint(v.Character[Options.Snapline_TargetPart.Value].Position)

                        if onScreen then
                            local dist = (Vector2new(pos.X, pos.Y - GetGuiInset(GuiService).Y) - Vector2new(mouse.X, mouse.Y)).Magnitude
                            if dist <= maxDist then
                                maxDist = dist 
                                target = v 
                            end
                        end
                    end
                end
            end
            return target
        end

        --// ESP

        delta_esp.NewText = function(i, v)
            delta_esp[i].objects[v] = {
                text = esp.NewDrawing("Text", {Color = Color3fromRGB(255, 255, 255), Outline = true, Center = true, Size = 13, Font = 2})
            }
        end

        --// Create Project Delta ESP Objects
        if ws:FindFirstChild("AiZones") and ws:FindFirstChild("NoCollision") and ws:FindFirstChild("NoCollision"):FindFirstChild("ExitLocations") then
            do
                --// NPC's
                do
                    for i,v in pairs(ws.AiZones:GetChildren()) do
                        for i2, v2 in pairs(v:GetChildren()) do
                            if v2:FindFirstChild("Humanoid") then
                                delta_esp.NewText("npcs", v2)
                            end
                        end
        
                        if v.Name ~= "Airdrop" or v.Name ~= "OutpostLandmines" then
                            v.ChildAdded:Connect(function(v3)
                                delta_esp.NewText("npcs", v3)
                            end)
        
                            v.ChildRemoved:Connect(function(v3)
                                if delta_esp["npcs"].objects.v3 then
                                    delta_esp["npcs"].objects.v3.text:Remove()
                                    delta_esp["npcs"].objects.v3 = nil
                                end
                            end)
                        end
                    end
                end
        
                --// Exit's
                do
                    for i,v in pairs(ws.NoCollision.ExitLocations:GetChildren()) do
                        delta_esp.NewText("exits", v)
                    end
        
                    ws.NoCollision.ExitLocations.ChildAdded:Connect(function(v)
                        delta_esp.NewText("exits", v)
                    end)
                end
        
                --// Corpse's
                do
                    for i,v in pairs(ws.DroppedItems:GetChildren()) do
                        if v:FindFirstChild("Humanoid") then
                            delta_esp.NewText("corpses", v)
                        end
                    end
        
                    ws.DroppedItems.ChildAdded:Connect(function(v)
                        wait(3)
                        if v:FindFirstChild("Humanoid") then
                            delta_esp.NewText("corpses", v)
                        end
                    end)
        
                    ws.DroppedItems.ChildRemoved:Connect(function(v)
                        if delta_esp["corpses"].objects.v then
                            delta_esp["corpses"].objects.v.text:Remove()
                            delta_esp["corpses"].objects.v = nil
                        end
                    end)
                end
        
                --// Vehicle's
                do
                    for i,v in pairs(ws.Vehicles:GetChildren()) do
                        delta_esp.NewText("vehicles", v)
                    end
        
                    ws.Vehicles.ChildAdded:Connect(function(v)
                        delta_esp.NewText("vehicles", v)
                    end)
        
                    ws.Vehicles.ChildRemoved:Connect(function(v)
                        if delta_esp["vehicles"].objects.v then
                            delta_esp["vehicles"].objects.v.text:Remove()
                            delta_esp["vehicles"].objects.v = nil
                        end
                    end)
                end
            end
        end

        do
            local main_loop = rs.RenderStepped:Connect(function()
                if closest_to_mouse("aimbot") ~= nil and Toggles.Aimlock_Toggle.Value and not Toggles.Aimlock_Resolver.Value and Options.Aimlock_Holding:GetState() then 
                    camera.CFrame = CFrame.new(camera.CFrame.Position, closest_to_mouse("aimbot").Character[Options.Aimlock_TargetPart.Value].Position)
                elseif closest_to_mouse("aimbot") ~= nil and Toggles.Aimlock_Toggle.Value and Toggles.Aimlock_Resolver.Value and Options.Aimlock_Holding:GetState() then
                    camera.CFrame = CFrame.new(camera.CFrame.Position, repStorage.Players[closest_to_mouse("aimbot").Name].Status.UAC:GetAttribute("LastVerifiedPos"))
                end

                if closest_to_mouse("ai") ~= nil and Toggles.NPCAimlock_Toggle.Value and Options.Aimlock_Holding:GetState() then
                    camera.CFrame = CFrame.new(camera.CFrame.Position, closest_to_mouse("ai")[Options.NPCAimlock_TargetPart.Value].Position)
                end

                if Toggles.InvViewer_Toggle.Value and closest_to_mouse("aimbot") ~= nil then
                    inventory_viewer_inv_text.Text = ""
                    inventory_viewer_title_text.Text = ""
                    inventory_viewer_title_text.Visible = true
                    inventory_viewer_inv_text.Visible = true
                    for _, clothes in pairs(game.ReplicatedStorage.Players[closest_to_mouse("aimbot").Name].Clothing:GetChildren()) do
                        inventory_viewer_inv_text.Text = inventory_viewer_inv_text.Text .. clothes.Name .. "\n"
                        inventory_viewer_title_text.Text = ("[%s's Inventory]"):format(closest_to_mouse("aimbot").Name)
                        for _, inventories in pairs(clothes:GetChildren()) do
                            if inventories.Name == "Inventory" then
                                for _, items in pairs(inventories:GetChildren()) do
                                    if items:IsA("StringValue") and items.Parent.Name == "Inventory" then
                                        inventory_viewer_inv_text.Text = inventory_viewer_inv_text.Text .. "    " .. items.Name .. "\n"
                                    end
                                end
                            end
                        end 
                    end
                else
                    inventory_viewer_title_text.Visible = false
                    inventory_viewer_inv_text.Visible = false
                end

                if Toggles.Snapline_Toggle.Value then
                    local ClosestPlayer = closest_to_mouse("snapline")

                    if ClosestPlayer ~= nil and ClosestPlayer.Character and ClosestPlayer.Character:FindFirstChild("HumanoidRootPart") and ClosestPlayer.Character:FindFirstChild("Head") then
                        local snapVector, snapOnScreen = camera:worldToViewportPoint(ClosestPlayer.Character[Options.Snapline_TargetPart.Value].Position)
                        if snapOnScreen then
                            Snapline_Object.From = Vector2new(uis:GetMouseLocation().X, uis:GetMouseLocation().Y)
                            Snapline_Object.To = Vector2new(snapVector.X, snapVector.Y)
                            Snapline_Object.Visible = true
                        else
                            Snapline_Object.Visible = false
                        end
                    else
                        Snapline_Object.Visible = false
                    end
                else
                    Snapline_Object.Visible = false
                end

                if Toggles.Lighting_CustomAmbient.Value then
                    lighting.Ambient = Options.Lighting_CustomAmbientColor.Value
                end
            
                if Toggles.Lighting_CustomTimeToggle.Value then
                    lighting.ClockTime = Options.Lighting_CustomTimeValue.Value
                end

                if Toggles.Player_WalkSpeedToggle.Value then
                    if plr.Character and plr.Character:FindFirstChild("Humanoid") then
                        plr.Character:FindFirstChild("Humanoid").WalkSpeed = Options.Player_WalkSpeedValue.Value
                    end
                end

                if Toggles.Player_JumpPowerToggle.Value then
                    if plr.Character and plr.Character:FindFirstChild("Humanoid") then
                        plr.Character:FindFirstChild("Humanoid").JumpHeight = Options.Player_JumpPowerValue.Value
                    end
                end

                if Toggles.Camera_ZoomToggle.Value and Options.Camera_ZoomHolding:GetState() then
                    camera.FieldOfView = Options.Camera_ZoomValue.Value
                elseif Toggles.Camera_FOVToggle.Value then
                    camera.FieldOfView = Options.Camera_FOVValue.Value
                end

                --// OTHER ESPS

                do
                    for i,v in pairs(delta_esp["npcs"].objects) do
                        if Toggles.OtherESP_NPC_Toggle.Value and i and i:FindFirstChild("Humanoid") and i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("Head") and i.Humanoid.Health ~= 0 and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and (Options.OtherESP_NPC_MaxDist.Value == 0 or ((i.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude < Options.OtherESP_NPC_MaxDist.Value)) then
                            local Vector, onScreen = camera:worldToViewportPoint(i.Head.Position)
                        
                            if onScreen then
                                v.text.Position = Vector2new(Vector.X, Vector.Y)
                                v.text.Color = Options.OtherESP_NPC_Color.Value
                                v.text.Visible = true
                                v.text.Text = tostring(i) .. ("\n[%sm]"):format(mathfloor((i.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude))
                            else
                                v.text.Visible = false
                            end
                        else
                            v.text.Visible = false
                        end
                    end
                
                    for i,v in pairs(delta_esp["exits"].objects) do
                        if Toggles.OtherESP_Exits_Toggle.Value and i and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and (Options.OtherESP_Exits_MaxDist.Value == 0 or ((i.Position - plr.Character.HumanoidRootPart.Position).Magnitude < Options.OtherESP_Exits_MaxDist.Value)) then
                            local Vector, onScreen = camera:worldToViewportPoint(i.Position)
                        
                            if onScreen then
                                v.text.Position = Vector2new(Vector.X, Vector.Y)
                                v.text.Color = Options.OtherESP_Exits_Color.Value
                                v.text.Visible = true
                                v.text.Text = tostring(i) .. ("\n[%sm]"):format(mathfloor((i.Position - plr.Character.HumanoidRootPart.Position).Magnitude))
                            else
                                v.text.Visible = false
                            end
                        else
                            v.text.Visible = false
                        end
                    end
                
                    for i,v in pairs(delta_esp["corpses"].objects) do
                        if Toggles.OtherESP_Corpses_Toggle.Value and i and i:FindFirstChild("Humanoid") and i:FindFirstChild("Head") and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and (Options.OtherESP_Corpses_MaxDist.Value == 0 or ((i.Head.Position - plr.Character.HumanoidRootPart.Position).Magnitude < Options.OtherESP_Corpses_MaxDist.Value)) then
                            local Vector, onScreen = camera:worldToViewportPoint(i.Head.Position)
                        
                            if onScreen then
                                v.text.Position = Vector2new(Vector.X, Vector.Y)
                                v.text.Color = Options.OtherESP_Corpses_Color.Value
                                v.text.Visible = true
                                v.text.Text = tostring(i) .. (" [Corpse]\n[%sm]"):format(mathfloor((i.Head.Position - plr.Character.HumanoidRootPart.Position).Magnitude))
                            else
                                v.text.Visible = false
                            end
                        else
                            v.text.Visible = false
                        end
                    end
                
                    for i,v in pairs(delta_esp["vehicles"].objects) do
                        if Toggles.OtherESP_Vehicles_Toggle.Value and i and i:FindFirstChild("Body") and i.Body:FindFirstChild("Hull") and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and (Options.OtherESP_Vehicles_MaxDist.Value == 0 or ((i.Body.Hull.Position - plr.Character.HumanoidRootPart.Position).Magnitude < Options.OtherESP_Vehicles_MaxDist.Value)) then
                            local Vector, onScreen = camera:worldToViewportPoint(i.Body.Hull.Position)
                        
                            if onScreen then
                                v.text.Position = Vector2new(Vector.X, Vector.Y)
                                v.text.Color = Options.OtherESP_Vehicles_Color.Value
                                v.text.Visible = true
                                v.text.Text = tostring(i) .. ("\n[%sm]"):format(mathfloor((i.Body.Hull.Position - plr.Character.HumanoidRootPart.Position).Magnitude))
                            else
                                v.text.Visible = false
                            end
                        else
                            v.text.Visible = false
                        end
                    end
                end
            end)
        end

    end)()

    --// Hooks
    do
        --// Silent Aimlock
        local constant_to_hook; 
        local bullet_module = require(game.GetService(game, "ReplicatedStorage").Modules.FPS.Bullet);
        for i, v in next, debug.getconstants(bullet_module.CreateBullet) do 
            if tostring(v) == "CFrame" then
                constant_to_hook = i;
                break;
            end;
        end;

        function calculate_projectile_prediction(target_part, projectile_speed)
            local distance = (target_part.Position - plr.Character.PrimaryPart.Position).Magnitude
            local time_to_hit = (distance / projectile_speed)
        
            local predicted_position = target_part.Position + (target_part.Velocity * time_to_hit)
            local delta = (predicted_position - target_part.Position).Magnitude
            time_to_hit = time_to_hit + (delta / projectile_speed)
        
            return target_part.Position + (target_part.Velocity * time_to_hit)
        end

        LPH_JIT_ULTRA(function()
            setconstant(require(game.ReplicatedStorage.Modules.FPS.Bullet).CreateBullet, constant_to_hook, "silent")

            local __index; __index = hookmetamethod(game, "__index", function(self, index)
                local val
                if index == "silent" then 
                    val = __index(self, "CFrame")
                    local replicated_player = game.ReplicatedStorage.Players[game.Players.LocalPlayer.Name]
                    local equipped_gun = replicated_player.Status.GameplayVariables.EquippedTool.Value
                    local loaded_ammo = replicated_player.Inventory[tostring(equipped_gun)].Attachments:FindFirstChild("Magazine") and replicated_player.Inventory[tostring(equipped_gun)].Attachments:FindFirstChild("Magazine"):FindFirstChildOfClass("StringValue").ItemProperties.LoadedAmmo:FindFirstChildOfClass("Folder"):GetAttribute("AmmoType") or replicated_player.Inventory[tostring(equipped_gun)].ItemProperties:FindFirstChild("LoadedAmmo"):FindFirstChildOfClass("Folder"):GetAttribute("AmmoType")
                    local velocity_attribute = game.ReplicatedStorage.AmmoTypes[tostring(loaded_ammo)]:GetAttribute("MuzzleVelocity")
                    if (math.random(1,100) <= Options.Silent_Hitchance.Value)  then
                        if Toggles.Silent_Toggle.Value and closest_to_mouse("aimbot") ~= nil then 
                            return CFrame.new(val.p, calculate_projectile_prediction(closest_to_mouse("aimbot").Character.Head, velocity_attribute))
                        end
                    end
                end
            
                return val or __index(self, index)
            end);
        end)()


        --// Get Ban Remote


    end


        LPH_JIT_ULTRA(function()
            local __namecall; __namecall = hookmetamethod(game, "__namecall", function(self, ...)
                local args = {...}
        
                do
                    if getnamecallmethod() == "GetAttribute" then
                        if args[1] == "" and Toggles.GunMods_NoMuzzleEffect.Value then
                            return false
                        end
                
                        if args[1] == "" and Toggles.GunMods_NoSpread.Value then
                            return 1
                        end

                        if args[1] == "" and Toggles.GunMods_NoProjectileDrop.Value then
                            return 0
                        end
                
                        if args[1] == "" and Toggles.GunMods_NoTracer.Value then
                            return false
                        end

                        if args[1] == "" and Toggles.GunMods_NoRecoil.Value then
                            return 0
                        end

                        if args[1] == "" and Toggles.GunMods_NoRecoil.Value then
                            return 0
                        end

                        if args[1] == "" and Toggles.GunMods_MagicBullets.Value then
                            return false
                        end

                        if args[1] == "" and Toggles.GunMods_MagicBullets.Value then
                            return 0
                        end
                    end
                
                    if getnamecallmethod() == "FireServer" then
                        if tostring(self) == "ProjectileInflict" then
                            task.spawn(function()
                                syn.set_thread_identity(7)
                                if args[2].Name == "Head" or args[2].Name == "FaceHitBox" or args[2].Name == "HeadTopHitBox" then
                                    headshot_sound:Play()
                                else
                                    bodyshot_sound:Play()
                                end
                            end)

                            if Toggles.Hitbox_OverrideToggle.Value and args[1][Options.Hitbox_OverridePart.Value] ~= nil then
                                args[2] = args[1][Options.Hitbox_OverridePart.Value]
                                return __namecall(self, unpack(args))
                            end
                        end

                        if tostring(self):lower():find("rlog") and args[1] and tonumber(args[1]) <= 1 or self == BanRemote then
                            return
                        end
                    end
        
                    if getnamecallmethod() == "SetPrimaryPartCFrame" and Toggles.Viewmodel_Offset_Toggle.Value then
                        return __namecall(self, camera.CFrame * CFrame.new(0.05, -1.35, 0.7) * CFrame.new(Options.Viewmodel_Offset_X.Value, Options.Viewmodel_Offset_Y.Value, -Options.Viewmodel_Offset_Z.Value))
                    end
                end
        
                return __namecall(self, unpack(args));
            end);
        end)()


    ---------blatants


    local AntiAimBox = Tabs.BlatantTab:AddLeftTabbox('Anti Aim')
    local Antilocktab = AntiAimBox:AddTab('Anti Lock For Free Scripts')
    
     
    Antilocktab:AddToggle('Anti Lock', {Text = 'Anti Lock ', Default = false, Tooltip = "Anti Lock"})
    Antilocktab:AddToggle('Anti Head', {Text = 'Anti Head ', Default = false, Tooltip = "Anti Head"})
   
   
    local VelocityBox = Tabs.BlatantTab:AddRightTabbox('Velocity')
    local velocitytab = VelocityBox:AddTab('Velocity')
   



    velocitytab:AddToggle('Head Spoofer', {Text = 'Head Spoofer', Default = false, Tooltip = "Anti Lock"})
    velocitytab:AddSlider('offset', {Text = 'Ofset ', Default = 1, Min = 0, Max = 21, Rounding = 1, Compact = true})
    velocitytab:AddToggle('Head Spoofer', {Text = 'Limbs Spoofer', Default = false, Tooltip = "Anti Lock"})
    velocitytab:AddSlider('offset', {Text = 'Ofset ', Default = 1, Min = 0, Max = 21, Rounding = 1, Compact = true})
    velocitytab:AddToggle('Head Spoofer', {Text = 'Velocity Spoofer', Default = false, Tooltip = "Anti Lock"})
    velocitytab:AddSlider('offset', {Text = 'x', Default = 1, Min = 0, Max = 21, Rounding = 1, Compact = true})
    velocitytab:AddSlider('offset', {Text = 'y', Default = 1, Min = 0, Max = 21, Rounding = 1, Compact = true})
    velocitytab:AddSlider('offset', {Text = 'z', Default = 1, Min = 0, Max = 21, Rounding = 1, Compact = true})


    local Antiiaimbox = Tabs.BlatantTab:AddLeftTabbox('Player')
    local antiaimtab = Antiiaimbox:AddTab('AntiAim')
    
    antiaimtab:AddToggle('Head Spoofer', {Text = 'Pitch', Default = false, Tooltip = "Anti Lock"})
    antiaimtab:AddSlider('offset', {Text = '', Default = 1, Min = 0, Max = 21, Rounding = 1, Compact = true})
    antiaimtab:AddSlider('offset', {Text = 'yaw', Default = 1, Min = 0, Max = 21, Rounding = 1, Compact = true})
    antiaimtab:AddDropdown('Aimlock_TargetPart', {Values = { 'Spin', 'jitter' }, Default = 1, Multi = false, Text = 'Target Part'})






































    --// Menu Window & Config List
    Library:SetWatermark('Galaxyware| Paid | Beta  | octohook fucker')
    Library:OnUnload(function()
        esp.Unload()

        for i,v in pairs(Toggles) do
            v.Value = false
        end

        Library.Unloaded = true
    end)

    local MenuGroup = Tabs.UISettings:AddRightGroupbox('Menu')

    MenuGroup:AddButton('Unload Script', function() Library:Unload() end)
        
    MenuGroup:AddButton('Panic Button', function()
        for i,v in pairs(Toggles) do
            v:SetValue(false)
        end
    end)

    MenuGroup:AddButton('Copy Join Code', function()
        setclipboard(("game:GetService('TeleportService'):TeleportToPlaceInstance(%s, '%s')"):format(game.PlaceId, game.JobId))
    end)

    MenuGroup:AddButton('Rejoin', function()
        game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, game.JobId)
    end)

    MenuGroup:AddDivider()

    MenuGroup:AddToggle('UISettings_WatermarkVisibility', {Text = 'Show Watermark', Default = true}):OnChanged(function()
        Library:SetWatermarkVisibility(Toggles.UISettings_WatermarkVisibility.Value)
    end)

    MenuGroup:AddToggle('UISettings_KeybindFrameVisibility', {Text = 'Show Keybind Frame', Default = false}):OnChanged(function()
        Library.KeybindFrame.Visible = Toggles.UISettings_KeybindFrameVisibility.Value
    end)

    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightControl', NoUI = true, Text = 'Menu keybind' }) 
    Library.ToggleKeybind = Options.MenuKeybind
    SaveManager:SetLibrary(Library)
    SaveManager:SetFolder('Galaxyware/ProjectDelta')
    SaveManager:BuildConfigSection(Tabs.UISettings)

    --// Theme Editor

    ThemeManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    ThemeManager:SetFolder('Galaxyware/ProjectDelta/Themes')
    ThemeManager:ApplyToTab(Tabs.UISettings)
end
